#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 10

// Typedef for pointer to integer
typedef int* IntPointer;

// Structure definition
typedef struct {
    char name[21];
    char city[21];
    char state[3];
} Rec;

typedef Rec* RecPointer;  // Pointer to a structure

// Pointer to structures and malloc allocation
void pointerToStructureExample() {
    RecPointer r = (RecPointer) malloc(sizeof(Rec));

    strcpy(r->name, "Leigh");
    strcpy(r->city, "Raleigh");
    strcpy(r->state, "NC");

    printf("City: %s\n", r->city);
    free(r);
}

// Pointer to array example
void pointerToArrayExample() {
    IntPointer p;
    p = (IntPointer) malloc(sizeof(int) * MAX);
    
    for (int i = 0; i < MAX; i++) {
        p[i] = i;
    }

    for (int i = 0; i < MAX; i++) {
        printf("%d ", p[i]);
    }
    printf("\n");

    free(p);
}

// Arrays of pointers example
void arraysOfPointersExample() {
    RecPointer a[MAX];
    a[0] = (RecPointer) malloc(sizeof(Rec));
    strcpy(a[0]->name, "John");

    printf("Name: %s\n", a[0]->name);
    free(a[0]);
}

// Structure containing pointers
typedef struct {
    char name[21];
    char city[21];
    char phone[21];
    char *comment;
} Addr;

// Pointer to structure with dynamically allocated comment
void structureContainingPointersExample() {
    Addr s;
    char comm[100];
    
    printf("Enter Name: ");
    fgets(s.name, 21, stdin);
    printf("Enter City: ");
    fgets(s.city, 21, stdin);
    printf("Enter Phone: ");
    fgets(s.phone, 21, stdin);
    printf("Enter Comment: ");
    fgets(comm, 100, stdin);
    
    s.comment = (char*) malloc(sizeof(char) * (strlen(comm) + 1));
    strcpy(s.comment, comm);

    printf("Comment: %s", s.comment);
    free(s.comment);
}

// Pointer to pointer example
void pointerToPointerExample() {
    int **p;
    int *q;

    p = (int**) malloc(sizeof(int*));
    *p = (int*) malloc(sizeof(int));
    **p = 12;

    q = *p;

    printf("Value: %d\n", *q);

    free(q);
    free(p);
}

// Linked list using pointer to structure
typedef struct AddrList {
    char name[21];
    char city[21];
    char state[3];
    struct AddrList* next;
} AddrList;

AddrList* top = NULL;

// Stack operations on linked list
void stackInit() {
    top = NULL;
}

int stackEmpty() {
    return top == NULL;
}

void stackPush(AddrList* newAddr) {
    newAddr->next = top;
    top = newAddr;
}

AddrList* stackPop() {
    if (top == NULL) return NULL;

    AddrList* temp = top;
    top = top->next;
    return temp;
}

// Demonstration of all features
int main() {
    pointerToStructureExample();
    pointerToArrayExample();
    arraysOfPointersExample();
    structureContainingPointersExample();
    pointerToPointerExample();
    
    // Linked stack example
    stackInit();
    AddrList* newAddr = (AddrList*) malloc(sizeof(AddrList));
    strcpy(newAddr->name, "Leigh");
    strcpy(newAddr->city, "Raleigh");
    strcpy(newAddr->state, "NC");
    
    stackPush(newAddr);

    AddrList* poppedAddr = stackPop();
    if (poppedAddr != NULL) {
        printf("Popped Addr Name: %s\n", poppedAddr->name);
        free(poppedAddr);
    }

    return 0;
}
